#include "cache.h"

int **llc_lru_meta;
bool **llc_lru_valid;

void LRU_llc_lru_meta_malloc() {
    llc_lru_meta = (int **)malloc(LLC_SET * sizeof(int **));
    for (uint32_t i=0; i<LLC_SET; i++) {
        llc_lru_meta[i] = (int *)malloc(LLC_WAY * sizeof(int *)); 

        for (uint32_t j=0; j<LLC_WAY; j++) {
            llc_lru_meta[i][j] = j;
        }
    }


    llc_lru_valid = (bool **)malloc(LLC_SET * sizeof(bool **));
    for (uint32_t i=0; i<LLC_SET; i++) {
        llc_lru_valid[i] = (bool *)malloc(LLC_WAY * sizeof(bool *)); 

        for (uint32_t j=0; j<LLC_WAY; j++) {
            llc_lru_valid[i][j] = false;
        }
    }
}

void LRU_llc_lru_meta_free() {
    for (int i = 0; i < LLC_SET; i++) {
        free(llc_lru_meta[i]);
    }

    free(llc_lru_meta);

    for (int i = 0; i < LLC_SET; i++) {
        free(llc_lru_valid[i]);
    }

    free(llc_lru_valid);
}

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    printf("Initializing LRU state.\n");

    LRU_llc_lru_meta_malloc();
}

uint32_t llc_lru_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    /* don't modify this code or put anything above it;
     * if there's an invalid block, we don't need to evict any valid ones */
    for (int way = 0; way < LLC_WAY; way++) {
        if (current_set[way].valid == false) {
            return way;
        }
    }


    // your eviction policy goes here

    uint32_t way = 0;

    // fill invalid line first
    for (way=0; way<LLC_WAY; way++) {
        if (llc_lru_valid[set][way] == false) {

            break;
        }
    }

    // LRU victim
    if (way == LLC_WAY) {
        for (way=0; way<LLC_WAY; way++) {
            if (llc_lru_meta[set][way] == LLC_WAY-1) {

                break;
            }
        }
    }

	assert(way < LLC_WAY);

    return way;
}

void llc_lru_update(uint32_t set, uint32_t way)
{
    // update lru replacement state
    for (uint32_t i=0; i<LLC_WAY; i++) {
        if (llc_lru_meta[set][i] < llc_lru_meta[set][way]) {
            llc_lru_meta[set][i]++;
        }
    }
    llc_lru_meta[set][way] = 0; // promote to the MRU position
    llc_lru_valid[set][way] = true;
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type, bool process_element)
{
    // baseline LRU
    return llc_lru_victim(cpu, instr_id, set, current_set, ip, full_addr, type); 
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit, bool process_element)
{
    if (!process_element) return;

    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    return llc_lru_update(set, way);
}

void CACHE::llc_replacement_final_stats()
{

}

uint32_t CACHE::llc_get_queue_latency(uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint32_t type, uint8_t hit, uint8_t queue_latency_type) {
    uint32_t ret = 0;

    switch (queue_latency_type) {
        case LLC_QUEUE_LATENCY_FILL     : ret = 3; break;
        case LLC_QUEUE_LATENCY_WRITE    : ret = 3; break;
        case LLC_QUEUE_LATENCY_READ     : ret = 2; break;
        case LLC_QUEUE_LATENCY_PREFETCH : ret = 2; break;
    }

    return ret;
}

